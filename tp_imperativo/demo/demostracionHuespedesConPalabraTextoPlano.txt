Lista<DNI> Hotel::huespedesConPalabra() const {
    Lista<DNI> result;
    int i = 0;
    //E1
    while( i < this->_ingresos.longitud() )
    {
        //E2
        result.concatenar( procesarIesimoIngreso( i ) );
        //E3
        i++;
        //E4
    }
    //E5
    result = sacarRepetidos(result);
    //E6
    return result;
}

Observaciones:
1. El m\'etodo es declarado "const"; es decir, "this" no se modifica. En particular, los valores de ingresos(this), salidas(this) y reservas(this) tampoco son modificados a lo largo de los estados.

2. Por la poscondici\'on del problema "longitud" definido sobre listas, la expresi\'on "this->_ingresos.longitud()" es igual a |ingresos(this)|.

3. Para este caso las siguientes expresiones son equivalentes:
 [ prm(prm(in)) | in  \selec  ingresos(this)[0..i), co  \selec  salidasDe(this), noHaySalidaEnElMedio(prm(in),co,this),
      hayReserva(in,co,this)]
 [ prm(prm(in)) | in  \selec  ingresos(this)[0..i), co  \selec  salidas(this), prm(prm(in)) == prm(co),
      noHaySalidaEnElMedio(prm(in),co,this), hayReserva(in,co,this)]
          (es equivalente tomar las salidas de una persona en particular,
            o tomar el total de las salidas y utilizar como primera condici\'on
            un filtro sobre el DNI)
 [ prm(prm(in)) | in  \selec  ingresos(this)[0..i), co  \selec  salidas(this), prm(prm(in)) == prm(co)
      \land noHaySalidaEnElMedio(prm(in),co,this) \land hayReserva(in,co,this)]
          (es equivalente incluir las tres condiciones separadas o una sola que comprende
                a las dem\'as)

**** Definiciones
  Pc: 
    i == 0 \land
    result == []

  Inv:
    0 <= i <= |ingresos(this)|  \land
    result == [ prm(prm(in)) | in  \selec  ingresos(this)[0..i), co  \selec  salidas(this), prm(prm(in)) == prm(co)
        \land noHaySalidaEnElMedio(prm(in),co,this) \land hayReserva(in,co,this)]

  Qc:
    result == [ prm(prm(in)) | in  \selec  ingresos(this), co  \selec  salidas(this), prm(prm(in)) == prm(co)
        \land noHaySalidaEnElMedio(prm(in),co,this) \land hayReserva(in,co,this)]

  B:
    i < |ingresos(this)|

  Fv (cota == 0):
    |ingresos(this)| - i


****Transici\'on de estados
  E1
  vale result == [] \land i == 0

  E2
  vale B \land Inv,
    i < |ingresos(this)| \land
    0 <= i <= |ingresos(this)|  \land
    result == [ prm(prm(in)) | in  \selec  ingresos(this)[0..i), co  \selec  salidas(this), prm(prm(in)) == prm(co)
        \land noHaySalidaEnElMedio(prm(in),co,this) \land hayReserva(in,co,this)]

  E3
  vale
    i == i@E2
    result == result@E2 ++ [ prm(prm(in)) | in  \selec  [ingresos(this)(i@E2)], co  \selec  salidas(this), prm(prm(in)) == prm(co)
        \land noHaySalidaEnElMedio(prm(in),co,this) \land hayReserva(in,co,this)]
        (por poscondicion del problema concatenar, y el problema procesarIesimoIngreso, especificado anteriormente)

  E4
  vale
    i == i@E3 + 1
    result == result@E3

  E5
  vale Qc
    result == [ prm(prm(in)) | in  \selec  ingresos(this), co  \selec  salidas(this), prm(prm(in)) == prm(co)
          \land noHaySalidaEnElMedio(prm(in),co,this) \land hayReserva(in,co,this)]

  E6
  vale
    result == sacarRepetidos(result@E5)

****Demostraciones del ciclo

**Pc => I
  como i == 0,
      0 <= i                          (propiedad de enteros)
      i <= |ingresos(this)|           (propiedad de listas: la longitud es un entero no negativo)
  entonces, uniendo ambas proposiciones
      0 <= i <= |ingresos(this)|

  por otro lado,
      [0..i) == [0..0) == []
  y esto implica
      ingresos(this)[0..i) == ingresos(this)[] == []
 
 Por definici\'on de las listas por comprensi\'on, si el selector se toma de una lista vac\'ia,
  la lista resultante tambi\'en es vac\'ia. En particular:
      [ prm(prm(in)) | in  \selec ingresos(this)[0..i), co  \selec  salidas(this), prm(prm(in)) == prm(co)
          \land noHaySalidaEnElMedio(prm(in),co,this) \land hayReserva(in,co,this)]
         == [ prm(prm(in)) | in  \selec [], co  \selec  salidas(this), prm(prm(in)) == prm(co)
          \land noHaySalidaEnElMedio(prm(in),co,this) \land hayReserva(in,co,this)]
         == []

  luego, como result == []
      result == [ prm(prm(in)) | in  \selec ingresos(this)[0..i), co  \selec  salidas(this), prm(prm(in)) == prm(co)
          \land noHaySalidaEnElMedio(prm(in),co,this) \land hayReserva(in,co,this)]

**El invariante se mantiene
  En E2, vale
    i < |ingresos(this)| \land
    result == [ prm(prm(in)) | in  \selec  ingresos(this)[0..i), co  \selec  salidas(this), prm(prm(in)) == prm(co)
        \land noHaySalidaEnElMedio(prm(in),co,this) \land hayReserva(in,co,this)]

  En E3, vale
    result == result@E2 ++ [ prm(prm(in)) | in  \selec  [ingresos(this)(i@E2)], co  \selec  salidas(this), prm(prm(in)) == prm(co)
        \land noHaySalidaEnElMedio(prm(in),co,this) \land hayReserva(in,co,this)]
  implica       (reemplazando result@E2 y i@E2)
    result == [ prm(prm(in)) | in  \selec  ingresos(this)[0..i), co  \selec  salidas(this), prm(prm(in)) == prm(co)
        \land noHaySalidaEnElMedio(prm(in),co,this) \land hayReserva(in,co,this)] ++
                [ prm(prm(in)) | in  \selec  [ingresos(this)(i)], co  \selec  salidas(this), prm(prm(in)) == prm(co)
                    \land noHaySalidaEnElMedio(prm(in),co,this) \land hayReserva(in,co,this)]
            
  Se puede observar que las listas concatenadas difieren \'unicamente en el selector "in".
    ("in  \selec  ingresos(this)[0..i)" y "in  \selec  [ingresos(this)(i)]")
  Esto es equivalente a tomar una sola lista por comprensi\'on, concatenando las listas del selector "in";
  es decir:
    result == [ prm(prm(in)) | in  \selec  ingresos(this)[0..i], co  \selec  salidas(this), prm(prm(in)) == prm(co)
        \land noHaySalidaEnElMedio(prm(in),co,this) \land hayReserva(in,co,this)]

  En E4, vale
    i == i@E3 + 1
    result == result@E4
  reemplazando, obtengo
    result == [ prm(prm(in)) | in  \selec  ingresos(this)[0..i), co  \selec  salidas(this), prm(prm(in)) == prm(co)
        \land noHaySalidaEnElMedio(prm(in),co,this) \land hayReserva(in,co,this)]
  finalmente, se observa:
    i == i@E3 + 1 == i@E2 + 1
  como 0 <= i@E2 < |ingresos(this)|, sumando 1 en cada miembro
    1 <= i <= |ingresos(this)|
  y por \'ultimo,
    0 <= i <= |ingresos(this)|


**!B \land Inv => Qc
  por hip\'otesis, vale
    i >= |ingresos(this)| \land 0 <= i <= |ingresos(this)| \land
    result == [ prm(prm(in)) | in  \selec  ingresos(this)[0..i), co  \selec  salidas(this), prm(prm(in)) == prm(co)
        \land noHaySalidaEnElMedio(prm(in),co,this) \land hayReserva(in,co,this)]
  como i <= |ingresos(this)| \land i >= |ingresos(this)|
    i == |ingresos(this)|
  luego, 
    ingresos(this)[0..i) == ingresos(this)[0..|ingresos(this)|) == ingresos(this)
  utilizando este reemplazo, 
    result == [ prm(prm(in)) | in  \selec  ingresos(this), co  \selec  salidas(this), prm(prm(in)) == prm(co)
        \land noHaySalidaEnElMedio(prm(in),co,this) \land hayReserva(in,co,this)]
  que es precisamente la proposici\'on Qc.

  **Inv \land Fv <= 0  => !B
  por el invariante,
    0 <= i <= |ingresos(this)|
  por hip\'otesis,
    |ingresos(this)| - i <= 0
    |ingresos(this)| <= i
  como i <= |ingresos(this)| \land i >= |ingresos(this)|
    i == |ingresos(this)|
  y en conclusi\'on, no vale que:
    i < |ingresos(this)|

**Fv decrece
  expresamos Fv al principio y final del ciclo,
    Fv@E2 == |ingresos(this)| - i@E2
    Fv@E4 == |ingresos(this)| - i@E4
  en la transici\'on de estados, se observa que:
    i@E4 == i@E3 + 1 == i@E2 + 1
  luego, por propiedad de enteros
    Fv@E4 == |ingresos(this)| - i@E2 - 1 < |ingresos(this)| - i@E2 == Fv@E2

****Demostracion del problema
  Como en E1 vale
    result == [] \land i == 0
  se satisface la precondici\'on del ciclo Pc. Luego, en E5 vale Qc;
    result == [ prm(prm(in)) | in  \selec  ingresos(this), co  \selec  salidas(this), prm(prm(in)) == prm(co)
          \land noHaySalidaEnElMedio(prm(in),co,this) \land hayReserva(in,co,this)]
  Como en E6 vale:
    result == sacarRepetidos(result@E5)
  reemplazando result@E5,
    result == sacarRepetidos([ prm(prm(in)) | in  \selec  ingresos(this), co  \selec  salidas(this), prm(prm(in)) == prm(co)
          \land noHaySalidaEnElMedio(prm(in),co,this) \land hayReserva(in,co,this)])
  finalmente, notando la observaci\'on (3.) al comienzo del problema:
    result == [ prm(prm(in)) | in  \selec  ingresos(this)[0..i), co  \selec  salidasDe(this), noHaySalidaEnElMedio(prm(in),co,this),
      hayReserva(in,co,this) ]
  que es lo que buscaba demostrar.